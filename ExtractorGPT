import tkinter as tk
from tkinter import filedialog
import docx
import openai
import openpyxl
from PIL import Image
import PyPDF2
import pytesseract

# Set up OpenAI API credentials
openai.api_key = 'API Key'

# Set the Tesseract OCR executable path
pytesseract.pytesseract.tesseract_cmd = r"Tesseract Path"

# Function to open a file and load its contents into the text box
def open_file():
    file_path = filedialog.askopenfilename(filetypes=[
        ('All Files', '*.*'),
        ('Text Files', '*.txt'),
        ('Word Documents', '*.docx;*.doc'),
        ('Excel Files', '*.xlsx;*.xls'),
        ('Images', '*.jpg;*.jpeg;*.png;*.gif'),
        ('PDF Files', '*.pdf')
    ])
    if file_path:
        if file_path.lower().endswith('.txt'):
            with open(file_path, 'r') as file:
                content = file.read()
                text_box.delete("1.0", tk.END)  # Clear previous content
                text_box.insert(tk.END, content)
        elif file_path.lower().endswith(('.docx', '.doc')):
            document = docx.Document(file_path)
            content = "\n".join([paragraph.text for paragraph in document.paragraphs])
            text_box.delete("1.0", tk.END)  # Clear previous content
            text_box.insert(tk.END, content)
        elif file_path.lower().endswith(('.xlsx', '.xls')):
            workbook = openpyxl.load_workbook(file_path)
            content = ""
            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                for row in sheet.iter_rows(values_only=True):
                    content += " ".join(str(cell) for cell in row) + "\n"
            text_box.delete("1.0", tk.END)  # Clear previous content
            text_box.insert(tk.END, content)
        elif file_path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif')):
            image = Image.open(file_path)
            text = pytesseract.image_to_string(image)
            text_box.delete("1.0", tk.END)  # Clear previous content
            text_box.insert(tk.END, text)
        elif file_path.lower().endswith('.pdf'):
            with open(file_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                num_pages = len(reader.pages)
                content = ""
                for page_number in range(num_pages):
                    page = reader.pages[page_number]
                    content += page.extract_text()
            text_box.delete("1.0", tk.END)  # Clear previous content
            text_box.insert(tk.END, content)

# Function to process the text using OpenAI GPT-3.5
def process_text():
    content = text_box.get("1.0", tk.END)
    user_input = input_text_box.get("1.0", tk.END)
    prompt = f"{user_input}\n\n{content}"
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=200,
        temperature=0.9,
        n=1,
        stop=None,
    )
    output_text = response.choices[0].text.strip()

    # Format the output text
    formatted_output = ""
    paragraphs = output_text.split("\n\n")
    for paragraph in paragraphs:
        formatted_output += f"{paragraph}\n\n"

    # Create a pop-up window to display the response
    response_window = tk.Toplevel(window)
    response_window.title("Response")
    response_window.geometry("500x400")
    response_text_box = tk.Text(response_window, height=10, wrap=tk.WORD)  # Set word wrapping
    response_text_box.pack(fill=tk.BOTH, expand=True)
    response_text_box.insert(tk.END, formatted_output)

    # Create a button to save the response as a Word document
    save_button = tk.Button(response_window, text="Save as Docx", command=lambda: save_as_docx(formatted_output))
    save_button.pack()

# Function to save the response as a Word document
def save_as_docx(content):
    file_path = filedialog.asksaveasfilename(defaultextension=".docx", filetypes=[("Word Documents", "*.docx")])
    if file_path:
        document = docx.Document()
        document.add_paragraph(content)
        document.save(file_path)

# Function to clear the text box and input box
def clear_text():
    text_box.delete("1.0", tk.END)
    input_text_box.delete("1.0", tk.END)

# Function to remove the placeholder text when the input box is clicked
def remove_placeholder(event):
    if input_text_box.get("1.0", tk.END).strip() == "Enter Your Request Here":
        input_text_box.delete("1.0", tk.END)

# Create the main window
window = tk.Tk()
window.title("Document Viewer and Processor")
window.geometry("500x400")

# Create a text box for displaying the contents of the document
text_box = tk.Text(window, height=10, wrap=tk.WORD)  # Set word wrapping
text_box.pack(fill=tk.BOTH, expand=True)

# Create a button to locate and open a document
open_button = tk.Button(window, text="Open File", command=open_file)
open_button.pack()

# Create a text box for user input
input_text_box = tk.Text(window, height=5, wrap=tk.WORD)  # Set word wrapping
input_text_box.pack(fill=tk.BOTH, expand=True)
input_text_box.insert(tk.END, "Enter Your Request Here")  # Set placeholder text

# Bind the click event to the input text box
input_text_box.bind("<Button-1>", remove_placeholder)

# Create a button to process the user input using OpenAI GPT-3.5
process_button = tk.Button(window, text="Process Text", command=process_text)
process_button.pack(side=tk.LEFT)

# Create a button to clear the text box and input box
clear_button = tk.Button(window, text="Clear Text", command=clear_text)
clear_button.pack(side=tk.LEFT)

# Start the GUI event loop
window.mainloop()
